import json
import datetime
import pytz
from create_bot import dp
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from handlers import keyboards

tz_MOSCOW = pytz.timezone('Europe/Moscow')
check_date = datetime.date.strftime(datetime.datetime.now(tz_MOSCOW), '%m.%y')
check_date_2 = datetime.date.strftime(datetime.datetime.now(tz_MOSCOW), '%d/%m/%Y')



class GetData(StatesGroup):
    waiting_for_schedule_number = State()


@dp.message_handler(commands=["start"])
async def start(message: types.Message) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é Inline –∏ BotCommand"""

    try:
        with open('./data/users.json', 'r', encoding="UTF-8") as file:
            data = json.load(file)
        if message.from_user.username not in data['users']:
            await message.reply(
                text="–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å")
        else:
            await message.answer(text='üìÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.inline_keyboard_main)
            await dp.bot.set_my_commands([
                types.BotCommand('start', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
                types.BotCommand('profile', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'),
            ])
    except json.decoder.JSONDecodeError:
        with open('./data/users.json', 'r+', encoding="UTF-8") as file:
            json.dump({'users': {}}, file)
        await message.reply(text="–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å")


@dp.message_handler(text='DrmCYS9GM6YZgsSR')
async def activate_secrete_code(message: types.Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""

    try:
        with open('./data/users.json', 'r', encoding='UTF-8') as json_file:
            data = json.load(json_file)
        if message.from_user.username in data['users']:
            await message.reply(text="–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–∞—Ö, –±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–µ –Ω—É–∂–Ω–æ")
        else:
            data['users'][f'{message.from_user.username}'] = {"chat_id": message.from_user.id}
            with open('./data/users.json', 'w', encoding='UTF-8') as json_file:
                json.dump(data, json_file)
            await message.reply(text="–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (0 –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)")
            await GetData.waiting_for_schedule_number.set()
    except json.decoder.JSONDecodeError:
        with open('./data/users.json', 'w', encoding='UTF-8') as json_file:
            json.dump({'users': {}}, json_file)


@dp.message_handler(commands='profile')
async def show_profile(call: types.CallbackQuery) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—Ç—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ –∫–æ–º–∞–Ω–¥—É, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–≥–∏–Ω—É –≤ telegram"""

    with open('./data/users.json', 'r', encoding='UTF-8') as json_file:
        data_file = json.load(json_file)
        txt = data_file['users'][f'{call.chat.username}']
    await call.answer(text=f'–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, {call.chat.username}: \n{txt}')
